// Generated by CoffeeScript 2.5.1
(function() {
  //###########################################################################################################
  // njs_util                  = require 'util'
  var CND, FS, OS, PATH, S, alert, badge, debug, echo, find_free_names, get_combinations, help, info, list_npm_names, log, new_json_source, rpr, urge, warn, whisper;

  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'NPM-NAME-LISTER';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  // suspend                   = require 'coffeenode-suspend'
  // step                      = suspend.step
  // after                     = suspend.after
  // eventually                = suspend.eventually
  // immediately               = suspend.immediately
  // every                     = suspend.every
  //...........................................................................................................
  new_json_source = require('stream-json');

  //...........................................................................................................
  S = {};

  S.max_length = 4;

  S.name_pattern = /^[a-z]+$/;

  S.registry_route = PATH.resolve(OS.homedir(), '.npm/registry.npmjs.org/-/all/.cache.json');

  S.cache_route = PATH.resolve(OS.homedir(), 'temp/npm-cache.json');

  //-----------------------------------------------------------------------------------------------------------
  list_npm_names = function() {
    var $, $async, $filter_duplicates, $pass_module_names, $pass_short_names, $pass_valid_names, $prepare_output, D, json_source, output, registry_stream;
    // registry = require '/home/flow/temp/npm-cache.json'
    D = require('pipedreams');
    $ = D.remit.bind(D);
    $async = D.remit_async.bind(D);
    json_source = new_json_source();
    registry_stream = FS.createReadStream(S.registry_route);
    output = FS.createWriteStream(S.cache_route, 'utf-8');
    //.........................................................................................................
    $pass_module_names = (S) => {
      var idx, level, module_name, module_nr, next_string_is_name;
      level = 0;
      idx = -1;
      module_name = null;
      module_nr = null;
      next_string_is_name = false;
      //.......................................................................................................
      return $((event, send) => {
        var name, value;
        // return if idx > 30
        // send event
        ({name, value} = event);
        //.....................................................................................................
        switch (name) {
          //...................................................................................................
          case 'startObject':
            level += +1;
            break;
          //...................................................................................................
          case 'endObject':
            level += -1;
            break;
          //...................................................................................................
          case 'keyValue':
            if (level === 1) {
              module_nr = parseInt(value, 10);
            // debug '-->', level, rpr value
            } else if ((level === 2) && (value === 'name')) {
              next_string_is_name = true;
              idx += +1;
            }
            break;
          // help '-->', level, rpr value
          //...................................................................................................
          case 'stringValue':
            if (next_string_is_name) {
              module_name = value;
              next_string_is_name = false;
              send(module_name);
            }
        }
        // urge '-->', level, rpr module_name
        //.....................................................................................................
        return null;
      });
    };
    //.........................................................................................................
    $pass_short_names = (S) => {
      return $((name, send) => {
        if (name.length <= S.max_length) {
          send(name);
        }
        //.....................................................................................................
        return null;
      });
    };
    //.........................................................................................................
    $pass_valid_names = (S) => {
      return $((name, send) => {
        if (S.name_pattern.test(name)) {
          send(name);
        }
        //.....................................................................................................
        return null;
      });
    };
    //.........................................................................................................
    $filter_duplicates = (S) => {
      var names;
      names = new Set();
      return $((name, send) => {
        if (!names.has(name)) {
          send(name);
        }
        names.add(name);
        //.....................................................................................................
        return null;
      });
    };
    //.........................................................................................................
    $prepare_output = (S) => {
      var is_first, send_nl;
      is_first = true;
      send_nl = false;
      return $((name, send, end) => {
        //.....................................................................................................
        if (is_first) {
          is_first = false;
          send('[\n');
        }
        //.....................................................................................................
        if (name != null) {
          if (send_nl) {
            send_nl = false;
            send(',\n');
          }
          send(JSON.stringify(name));
          send_nl = true;
        }
        //.....................................................................................................
        if (end != null) {
          send('\n]\n');
          end();
        }
        //.....................................................................................................
        return null;
      });
    };
    //.........................................................................................................
    registry_stream.pipe(json_source.input).pipe($pass_module_names(S)).pipe($pass_short_names(S)).pipe($pass_valid_names(S)).pipe($filter_duplicates(S)).pipe(D.$show()).pipe(D.$sort()).pipe($prepare_output(S)).pipe(output);
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  find_free_names = function() {
    var count, i, known_names, len, name, names, new_names, ref;
    known_names = new Set(require(S.cache_route));
    new_names = new Set();
    help(`There are ${known_names.size} names with ${S.max_length} characters or less
registered with npm.`);
    //.........................................................................................................
    names = null;
    count = 0;
    while (true) {
      count += +1;
      if (count > 4) {
        break;
      }
      ref = names = get_combinations(names);
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        if (!/^j[aeiou]?z[aeiou]?r[aeiou]?$/.test(name)) {
          // continue unless ( /^[^aeiouy][aeiouy][^aeiouy][aeiouy]$/ ).test name
          // continue unless ( /^[^aeiouy][aeiouy][^aeiouy]$/ ).test name
          // continue unless ( /^kw..$/ ).test name
          // continue unless ( /^cn.$/ ).test name
          // continue unless ( /^fr..$/ ).test name
          continue;
        }
        if (known_names.has(name)) {
          continue;
        }
        new_names.add(name);
        echo(name);
      }
    }
    //.........................................................................................................
    debug(new_names.size);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  get_combinations = function(combinations = null) {
    var R, alphabet, combination, i, j, len, len1, letter;
    alphabet = Array.from('abcdefghijklmnopqrstuvwxyz');
    // combinations ?= ( '' for letter in alphabet )
    if (combinations == null) {
      combinations = [''];
    }
    R = [];
    for (i = 0, len = alphabet.length; i < len; i++) {
      letter = alphabet[i];
      for (j = 0, len1 = combinations.length; j < len1; j++) {
        combination = combinations[j];
        R.push(letter + combination);
      }
    }
    return R;
  };

  // #-----------------------------------------------------------------------------------------------------------
  // get_combinator = ( combinations = null ) ->
  //   alphabet      = Array.from 'abcdefghijklmnopqrstuvwxyz'
  //   combinations ?= [ '' ]
  //   for letter in alphabet
  //     for combination in combinations
  //       yield combination + letter
  //   return null

  //###########################################################################################################
  if (module.parent == null) {
    // list_npm_names()
    find_free_names();
  }

  // help words.length
// debug JSON.stringify words = get_combinations words
// help words.length
// debug JSON.stringify words = get_combinations words
// help words.length
// debug JSON.stringify words = get_combinations words
// help words.length

}).call(this);

//# sourceMappingURL=main.js.map
