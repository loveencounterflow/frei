// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var $, $async, $drain, $show, $watch, CND, FS, OS, PATH, SP, alert, badge, cast, debug, echo, help, info, isa, jr, log, rpr, type_of, urge, validate, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  // njs_util                  = require 'util'
  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'NPM-NAME-LISTER';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  ({jr} = CND);

  this.types = require('./types');

  ({isa, validate, cast, type_of} = this.types);

  //...........................................................................................................
  // DATOM                     = new ( require 'datom' ).Datom { dirty: false, }
  // { new_datom
  //   lets
  //   freeze
  //   thaw
  //   is_frozen
  //   select }                = DATOM.export()
  //...........................................................................................................
  SP = require('steampipes');

  // SP                        = require '../../apps/steampipes'
  ({$, $async, $drain, $watch, $show} = SP.export());

  //...........................................................................................................
  this.all_npmnames = require('all-the-package-names');

  debug('^624^', indexOf.call(this.all_npmnames, 'cup') >= 0);

  //-----------------------------------------------------------------------------------------------------------
  this.get_valid_npmchrs = function(position) {
    var R, chr, cid, i, prefix;
    prefix = (function() {
      switch (position) {
        case 'first':
          return '';
        case 'other':
          return 'a';
        default:
          throw new Error(`^55763^ illegal position ${rpr(position)}`);
      }
    })();
    R = '';
    for (cid = i = 0x00; i <= 255; cid = ++i) {
      chr = String.fromCodePoint(cid);
      if (isa._frei_npmname(prefix + chr)) {
        R += chr;
      }
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.walk_all_possible_names = function*(min_chr_count, max_chr_count) {
    var count, i, ref, ref1;
    if (max_chr_count == null) {
      max_chr_count = min_chr_count;
    }
    validate.count(min_chr_count);
    validate.count(max_chr_count);
    if (!(min_chr_count <= max_chr_count)) {
      throw new Error(`^7763^ min_chr_count must be equal or greater than max_chr_count, got ${min_chr_count}, ${max_chr_count}`);
    }
    for (count = i = ref = min_chr_count, ref1 = max_chr_count; (ref <= ref1 ? i <= ref1 : i >= ref1); count = ref <= ref1 ? ++i : --i) {
      yield* this._walk_all_possible_names(count);
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this._walk_all_possible_names = function*(count) {
    var chr, i, j, k, len, len1, len2, permutation, ref, ref1, tail, tails;
    if (count === 0) {
      return;
    }
    permutation = require('string-permutation');
    //.........................................................................................................
    if (count === 1) {
      ref = this.valid_npmchrs.first;
      for (i = 0, len = ref.length; i < len; i++) {
        chr = ref[i];
        yield chr;
      }
      return;
    }
    //.........................................................................................................
    tails = permutation(this.valid_npmchrs.other, {
      maxSize: count - 1,
      recursive: false
    });
    ref1 = this.valid_npmchrs.first;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      chr = ref1[j];
      for (k = 0, len2 = tails.length; k < len2; k++) {
        tail = tails[k];
        yield chr + tail;
      }
    }
  };

  //     if count is 1
  //       yield first_chr
  //       continue
  //     for nr in [ 1 .. count ]

  //     tail = []
  //     #   for
  //   return null

  //-----------------------------------------------------------------------------------------------------------
  //.........................................................................................................
  this.valid_npmchrs = {
    first: this.get_valid_npmchrs('first'),
    other: this.get_valid_npmchrs('other')
  };

  // debug @valid_npmchrs

  //-----------------------------------------------------------------------------------------------------------
  this.f = function() {
    return new Promise((resolve) => {
      var all_npmnames, last, main, main_source, max_chr_count, min_chr_count, output_path, writer, writer_source;
      last = Symbol('last');
      all_npmnames = new Set(this.all_npmnames);
      min_chr_count = 2;
      max_chr_count = 3;
      main_source = this.walk_all_possible_names(min_chr_count, max_chr_count);
      writer_source = SP.new_push_source();
      output_path = './free-npm-names.txt';
      (require('fs')).writeFileSync(output_path, '');
      //.........................................................................................................
      writer = [];
      writer.push(writer_source);
      writer.push(SP.$as_line());
      writer.push(SP.tee_write_to_file_sync(output_path));
      writer.push($drain());
      SP.pull(...writer);
      //.........................................................................................................
      main = [];
      main.push(main_source);
      // main.push SP.$filter ( name ) -> name.length < 2
      // main.push SP.$filter ( name ) -> isa._frei_npmname name
      // main.push SP.$filter ( name ) -> /(.)\1\1/.test name
      // main.push SP.$filter ( name ) -> name.startsWith 'q'
      main.push(SP.$filter(function(name) {
        return !/[._-]/.test(name);
      }));
      main.push(SP.$filter(function(name) {
        return !/[0-9]/.test(name);
      }));
      // main.push SP.$filter ( name ) -> not /^[0-9]/.test name
      main.push(SP.$filter(function(name) {
        return !/^-/.test(name);
      }));
      main.push(SP.$filter(function(name) {
        return !/[._-]$/.test(name);
      }));
      main.push(SP.$filter(function(name) {
        return /^[^aeiou][aeiou].$/.test(name);
      }));
      // main.push SP.$filter ( name ) -> /(^.[aeiou])|(^[aeiou].[aeiou])/.test name
      // main.push SP.$filter ( name ) -> /^[aeiou].[aeiou]/.test name
      main.push(SP.$filter(function(name) {
        return !all_npmnames.has(name);
      }));
      // main.push $ ( d, send ) -> send d.join ''
      // main.push SP.$show()
      main.push(SP.$sort());
      main.push($watch({last}, function(d) {
        if (d === last) {
          return writer_source.end();
        }
        return writer_source.send(d);
      }));
      // main.push $watch
      // main.push $drain ( names ) -> resolve names
      main.push($drain());
      SP.pull(...main);
      //.........................................................................................................
      return null;
    });
  };

  //###########################################################################################################
  if (module === require.main) {
    (async() => {
      info(this.all_npmnames.length);
      // => 286289
      // seen_names = new Set()
      // for name in @all_npmnames
      //   continue unless name.length < 2
      //   seen_names.add name
      // info [ seen_names..., ].join ' '
      return help(((await this.f())).join(' '));
    })();
  }

  (function() {    // debug '^776^', [ ( @walk_all_possible_names 3 )... ].join ' '

    //###########################################################################################################
    //###########################################################################################################
    //###########################################################################################################
    //###########################################################################################################
    //###########################################################################################################
    //###########################################################################################################
    var find_free_names, list_npm_names;
    //-----------------------------------------------------------------------------------------------------------
    list_npm_names = function() {
      var $filter_duplicates, $pass_module_names, $pass_short_names, $pass_valid_names, $prepare_output, D, json_source, output, registry_stream;
      // registry = require '/home/flow/temp/npm-cache.json'
      D = require('pipedreams');
      $ = D.remit.bind(D);
      $async = D.$async.bind(D);
      json_source = new_json_source();
      registry_stream = FS.createReadStream(S.registry_route);
      output = FS.createWriteStream(S.cache_route, 'utf-8');
      //.........................................................................................................
      $pass_module_names = (S) => {
        var idx, level, module_name, module_nr, next_string_is_name;
        level = 0;
        idx = -1;
        module_name = null;
        module_nr = null;
        next_string_is_name = false;
        //.......................................................................................................
        return $((event, send) => {
          var name, value;
          // return if idx > 30
          // send event
          ({name, value} = event);
          //.....................................................................................................
          switch (name) {
            //...................................................................................................
            case 'startObject':
              level += +1;
              break;
            //...................................................................................................
            case 'endObject':
              level += -1;
              break;
            //...................................................................................................
            case 'keyValue':
              if (level === 1) {
                module_nr = parseInt(value, 10);
              // debug '-->', level, rpr value
              } else if ((level === 2) && (value === 'name')) {
                next_string_is_name = true;
                idx += +1;
              }
              break;
            // help '-->', level, rpr value
            //...................................................................................................
            case 'stringValue':
              if (next_string_is_name) {
                module_name = value;
                next_string_is_name = false;
                send(module_name);
              }
          }
          // urge '-->', level, rpr module_name
          //.....................................................................................................
          return null;
        });
      };
      //.........................................................................................................
      $pass_short_names = (S) => {
        return $((name, send) => {
          if (name.length <= S.max_length) {
            send(name);
          }
          //.....................................................................................................
          return null;
        });
      };
      //.........................................................................................................
      $pass_valid_names = (S) => {
        return $((name, send) => {
          if (S.name_pattern.test(name)) {
            send(name);
          }
          //.....................................................................................................
          return null;
        });
      };
      //.........................................................................................................
      $filter_duplicates = (S) => {
        var names;
        names = new Set();
        return $((name, send) => {
          if (!names.has(name)) {
            send(name);
          }
          names.add(name);
          //.....................................................................................................
          return null;
        });
      };
      //.........................................................................................................
      $prepare_output = (S) => {
        var is_first, send_nl;
        is_first = true;
        send_nl = false;
        return $((name, send, end) => {
          //.....................................................................................................
          if (is_first) {
            is_first = false;
            send('[\n');
          }
          //.....................................................................................................
          if (name != null) {
            if (send_nl) {
              send_nl = false;
              send(',\n');
            }
            send(JSON.stringify(name));
            send_nl = true;
          }
          //.....................................................................................................
          if (end != null) {
            send('\n]\n');
            end();
          }
          //.....................................................................................................
          return null;
        });
      };
      //.........................................................................................................
      registry_stream.pipe(json_source.input).pipe($pass_module_names(S)).pipe($pass_short_names(S)).pipe($pass_valid_names(S)).pipe($filter_duplicates(S)).pipe(D.$show()).pipe(D.$sort()).pipe($prepare_output(S)).pipe(output);
      //.........................................................................................................
      return null;
    };
    //-----------------------------------------------------------------------------------------------------------
    return find_free_names = function() {
      var count, i, known_names, len, name, names, new_names, ref;
      known_names = new Set(require(S.cache_route));
      new_names = new Set();
      help(`There are ${known_names.size} names with ${S.max_length} characters or less
registered with npm.`);
      //.........................................................................................................
      names = null;
      count = 0;
      while (true) {
        count += +1;
        if (count > 4) {
          break;
        }
        ref = names = get_combinations(names);
        for (i = 0, len = ref.length; i < len; i++) {
          name = ref[i];
          if (!/^j[aeiou]?z[aeiou]?r[aeiou]?$/.test(name)) {
            // continue unless ( /^[^aeiouy][aeiouy][^aeiouy][aeiouy]$/ ).test name
            // continue unless ( /^[^aeiouy][aeiouy][^aeiouy]$/ ).test name
            // continue unless ( /^kw..$/ ).test name
            // continue unless ( /^cn.$/ ).test name
            // continue unless ( /^fr..$/ ).test name
            continue;
          }
          if (known_names.has(name)) {
            continue;
          }
          new_names.add(name);
          echo(name);
        }
      }
      //.........................................................................................................
      debug(new_names.size);
      return null;
    };
  });

  // #-----------------------------------------------------------------------------------------------------------
// get_combinator = ( combinations = null ) ->
//   alphabet      = Array.from 'abcdefghijklmnopqrstuvwxyz'
//   combinations ?= [ '' ]
//   for letter in alphabet
//     for combination in combinations
//       yield combination + letter
//   return null

}).call(this);

//# sourceMappingURL=main.js.map
