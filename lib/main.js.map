{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\n# njs_util                  = require 'util'\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'NPM-NAME-LISTER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n# suspend                   = require 'coffeenode-suspend'\n# step                      = suspend.step\n# after                     = suspend.after\n# eventually                = suspend.eventually\n# immediately               = suspend.immediately\n# every                     = suspend.every\n#...........................................................................................................\nnew_json_source           = require 'stream-json'\n#...........................................................................................................\nS                   = {}\nS.max_length        = 4\nS.name_pattern      = /^[a-z]+$/\nS.registry_route    = PATH.resolve OS.homedir(), '.npm/registry.npmjs.org/-/all/.cache.json'\nS.cache_route       = PATH.resolve OS.homedir(), 'temp/npm-cache.json'\n\n\n#-----------------------------------------------------------------------------------------------------------\nlist_npm_names = ->\n  # registry = require '/home/flow/temp/npm-cache.json'\n  D                   = require 'pipedreams'\n  $                   = D.remit.bind D\n  $async              = D.remit_async.bind D\n  json_source         = new_json_source()\n  registry_stream     = FS.createReadStream   S.registry_route\n  output              = FS.createWriteStream  S.cache_route, 'utf-8'\n  #.........................................................................................................\n  $pass_module_names = ( S ) =>\n    level               = 0\n    idx                 = -1\n    module_name         = null\n    module_nr           = null\n    next_string_is_name = no\n    #.......................................................................................................\n    return $ ( event, send ) =>\n      # return if idx > 30\n      # send event\n      { name, value } = event\n      #.....................................................................................................\n      switch name\n        #...................................................................................................\n        when 'startObject'\n          level += +1\n        #...................................................................................................\n        when 'endObject'\n          level += -1\n        #...................................................................................................\n        when 'keyValue'\n          if level is 1\n            module_nr = parseInt value, 10\n            # debug '-->', level, rpr value\n          else if ( level is 2 ) and ( value is 'name' )\n            next_string_is_name = yes\n            idx += +1\n            # help '-->', level, rpr value\n        #...................................................................................................\n        when 'stringValue'\n          if next_string_is_name\n            module_name         = value\n            next_string_is_name = no\n            send module_name\n            # urge '-->', level, rpr module_name\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  $pass_short_names = ( S ) =>\n    return $ ( name, send ) =>\n      send name if name.length <= S.max_length\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  $pass_valid_names = ( S ) =>\n    return $ ( name, send ) =>\n      send name if S.name_pattern.test name\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  $filter_duplicates = ( S ) =>\n    names = new Set()\n    return $ ( name, send ) =>\n      send name unless names.has name\n      names.add name\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  $prepare_output = ( S ) =>\n    is_first  = yes\n    send_nl   = no\n    return $ ( name, send, end ) =>\n      #.....................................................................................................\n      if is_first\n        is_first = no\n        send '[\\n'\n      #.....................................................................................................\n      if name?\n        if send_nl\n          send_nl = no\n          send ',\\n'\n        send JSON.stringify name\n        send_nl = yes\n      #.....................................................................................................\n      if end?\n        send '\\n]\\n'\n        end()\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  registry_stream\n    .pipe json_source.input\n    .pipe $pass_module_names  S\n    .pipe $pass_short_names   S\n    .pipe $pass_valid_names   S\n    .pipe $filter_duplicates  S\n    .pipe D.$show()\n    .pipe D.$sort()\n    .pipe $prepare_output     S\n    .pipe output\n  #.........................................................................................................\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\nfind_free_names = ->\n  known_names = new Set require S.cache_route\n  new_names   = new Set()\n  help \"\"\"\n    There are #{known_names.size} names with #{S.max_length} characters or less\n    registered with npm.\"\"\"\n  #.........................................................................................................\n  names = null\n  count = 0\n  loop\n    count += +1\n    break if count > 4\n    for name in names = get_combinations names\n      # continue unless ( /^[^aeiouy][aeiouy][^aeiouy][aeiouy]$/ ).test name\n      # continue unless ( /^[^aeiouy][aeiouy][^aeiouy]$/ ).test name\n      # continue unless ( /^kw..$/ ).test name\n      # continue unless ( /^cn.$/ ).test name\n      # continue unless ( /^fr..$/ ).test name\n      continue unless ( /^j[aeiou]?z[aeiou]?r[aeiou]?$/ ).test name\n      continue if known_names.has name\n      new_names.add name\n      echo name\n  #.........................................................................................................\n  debug new_names.size\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nget_combinations = ( combinations = null ) ->\n  alphabet      = Array.from 'abcdefghijklmnopqrstuvwxyz'\n  # combinations ?= ( '' for letter in alphabet )\n  combinations ?= [ '' ]\n  R = []\n  for letter in alphabet\n    for combination in combinations\n      R.push letter + combination\n  return R\n\n# #-----------------------------------------------------------------------------------------------------------\n# get_combinator = ( combinations = null ) ->\n#   alphabet      = Array.from 'abcdefghijklmnopqrstuvwxyz'\n#   combinations ?= [ '' ]\n#   for letter in alphabet\n#     for combination in combinations\n#       yield combination + letter\n#   return null\n\n\n############################################################################################################\nunless module.parent?\n  # list_npm_names()\n  find_free_names()\n  # help words.length\n  # debug JSON.stringify words = get_combinations words\n  # help words.length\n  # debug JSON.stringify words = get_combinations words\n  # help words.length\n  # debug JSON.stringify words = get_combinations words\n  # help words.length\n\n"
  ]
}