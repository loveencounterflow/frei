{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'NPM-NAME-LISTER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ jr }                    = CND\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = @types\n#...........................................................................................................\n# DATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n# { new_datom\n#   lets\n#   freeze\n#   thaw\n#   is_frozen\n#   select }                = DATOM.export()\n#...........................................................................................................\nSP                        = require 'steampipes'\n# SP                        = require '../../apps/steampipes'\n{ $\n  $async\n  $drain\n  $watch\n  $show  }                = SP.export()\n#...........................................................................................................\n@all_npmnames             = require 'all-the-package-names'\ndebug '^624^', 'cup' in @all_npmnames\n\n#-----------------------------------------------------------------------------------------------------------\n@get_valid_npmchrs = ( position ) ->\n  prefix = switch position\n    when 'first' then ''\n    when 'other' then 'a'\n    else throw new Error \"^55763^ illegal position #{rpr position}\"\n  R = ''\n  for cid in [ 0x00 .. 0xff ]\n    chr = String.fromCodePoint cid\n    R += chr if isa._frei_npmname prefix + chr\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_all_possible_names = ( min_chr_count, max_chr_count ) ->\n  max_chr_count ?= min_chr_count\n  validate.count min_chr_count\n  validate.count max_chr_count\n  unless min_chr_count <= max_chr_count\n    throw new Error \"^7763^ min_chr_count must be equal or greater than max_chr_count, got #{min_chr_count}, #{max_chr_count}\"\n  for count in [ min_chr_count .. max_chr_count ]\n    yield from @_walk_all_possible_names count\n  return\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_all_possible_names = ( count ) ->\n  return if count is 0\n  permutation = require 'string-permutation'\n  #.........................................................................................................\n  if count is 1\n    yield chr for chr in @valid_npmchrs.first\n    return\n  #.........................................................................................................\n  tails = permutation @valid_npmchrs.other, { maxSize: count - 1, recursive: false, }\n  for chr in @valid_npmchrs.first\n    for tail in tails\n      yield chr + tail\n  #.........................................................................................................\n  yield return\n\n\n#     if count is 1\n#       yield first_chr\n#       continue\n#     for nr in [ 1 .. count ]\n\n#     tail = []\n#     #   for\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@valid_npmchrs =\n  first: @get_valid_npmchrs 'first'\n  other: @get_valid_npmchrs 'other'\n# debug @valid_npmchrs\n\n#-----------------------------------------------------------------------------------------------------------\n@f = -> new Promise ( resolve ) =>\n  last          = Symbol 'last'\n  all_npmnames  = new Set @all_npmnames\n  min_chr_count = 2\n  max_chr_count = 3\n  main_source   = @walk_all_possible_names min_chr_count, max_chr_count\n  writer_source = SP.new_push_source()\n  output_path   = './free-npm-names.txt'\n  ( require 'fs' ).writeFileSync output_path, ''\n  #.........................................................................................................\n  writer        = []\n  writer.push writer_source\n  writer.push SP.$as_line()\n  writer.push SP.tee_write_to_file_sync output_path\n  writer.push $drain()\n  SP.pull writer...\n  #.........................................................................................................\n  main          = []\n  main.push main_source\n  # main.push SP.$filter ( name ) -> name.length < 2\n  # main.push SP.$filter ( name ) -> isa._frei_npmname name\n  # main.push SP.$filter ( name ) -> /(.)\\1\\1/.test name\n  # main.push SP.$filter ( name ) -> name.startsWith 'q'\n  main.push SP.$filter ( name ) -> not /[._-]/.test name\n  main.push SP.$filter ( name ) -> not /[0-9]/.test name\n  # main.push SP.$filter ( name ) -> not /^[0-9]/.test name\n  main.push SP.$filter ( name ) -> not /^-/.test name\n  main.push SP.$filter ( name ) -> not /[._-]$/.test name\n  main.push SP.$filter ( name ) -> /^[^aeiou][aeiou].$/.test name\n  # main.push SP.$filter ( name ) -> /(^.[aeiou])|(^[aeiou].[aeiou])/.test name\n  # main.push SP.$filter ( name ) -> /^[aeiou].[aeiou]/.test name\n  main.push SP.$filter ( name ) -> not all_npmnames.has name\n  # main.push $ ( d, send ) -> send d.join ''\n  # main.push SP.$show()\n  main.push SP.$sort()\n  main.push $watch { last, }, ( d ) -> return writer_source.end() if d is last; writer_source.send d\n  # main.push $watch\n  # main.push $drain ( names ) -> resolve names\n  main.push $drain()\n  SP.pull main...\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  info @all_npmnames.length\n  # => 286289\n  # seen_names = new Set()\n  # for name in @all_npmnames\n  #   continue unless name.length < 2\n  #   seen_names.add name\n  # info [ seen_names..., ].join ' '\n  help ( await @f() ).join ' '\n\n  # debug '^776^', [ ( @walk_all_possible_names 3 )... ].join ' '\n\n\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n############################################################################################################\n->\n\n  #-----------------------------------------------------------------------------------------------------------\n  list_npm_names = ->\n    # registry = require '/home/flow/temp/npm-cache.json'\n    D                   = require 'pipedreams'\n    $                   = D.remit.bind D\n    $async              = D.$async.bind D\n    json_source         = new_json_source()\n    registry_stream     = FS.createReadStream   S.registry_route\n    output              = FS.createWriteStream  S.cache_route, 'utf-8'\n    #.........................................................................................................\n    $pass_module_names = ( S ) =>\n      level               = 0\n      idx                 = -1\n      module_name         = null\n      module_nr           = null\n      next_string_is_name = no\n      #.......................................................................................................\n      return $ ( event, send ) =>\n        # return if idx > 30\n        # send event\n        { name, value } = event\n        #.....................................................................................................\n        switch name\n          #...................................................................................................\n          when 'startObject'\n            level += +1\n          #...................................................................................................\n          when 'endObject'\n            level += -1\n          #...................................................................................................\n          when 'keyValue'\n            if level is 1\n              module_nr = parseInt value, 10\n              # debug '-->', level, rpr value\n            else if ( level is 2 ) and ( value is 'name' )\n              next_string_is_name = yes\n              idx += +1\n              # help '-->', level, rpr value\n          #...................................................................................................\n          when 'stringValue'\n            if next_string_is_name\n              module_name         = value\n              next_string_is_name = no\n              send module_name\n              # urge '-->', level, rpr module_name\n        #.....................................................................................................\n        return null\n    #.........................................................................................................\n    $pass_short_names = ( S ) =>\n      return $ ( name, send ) =>\n        send name if name.length <= S.max_length\n        #.....................................................................................................\n        return null\n    #.........................................................................................................\n    $pass_valid_names = ( S ) =>\n      return $ ( name, send ) =>\n        send name if S.name_pattern.test name\n        #.....................................................................................................\n        return null\n    #.........................................................................................................\n    $filter_duplicates = ( S ) =>\n      names = new Set()\n      return $ ( name, send ) =>\n        send name unless names.has name\n        names.add name\n        #.....................................................................................................\n        return null\n    #.........................................................................................................\n    $prepare_output = ( S ) =>\n      is_first  = yes\n      send_nl   = no\n      return $ ( name, send, end ) =>\n        #.....................................................................................................\n        if is_first\n          is_first = no\n          send '[\\n'\n        #.....................................................................................................\n        if name?\n          if send_nl\n            send_nl = no\n            send ',\\n'\n          send JSON.stringify name\n          send_nl = yes\n        #.....................................................................................................\n        if end?\n          send '\\n]\\n'\n          end()\n        #.....................................................................................................\n        return null\n    #.........................................................................................................\n    registry_stream\n      .pipe json_source.input\n      .pipe $pass_module_names  S\n      .pipe $pass_short_names   S\n      .pipe $pass_valid_names   S\n      .pipe $filter_duplicates  S\n      .pipe D.$show()\n      .pipe D.$sort()\n      .pipe $prepare_output     S\n      .pipe output\n    #.........................................................................................................\n    return null\n\n\n  #-----------------------------------------------------------------------------------------------------------\n  find_free_names = ->\n    known_names = new Set require S.cache_route\n    new_names   = new Set()\n    help \"\"\"\n      There are #{known_names.size} names with #{S.max_length} characters or less\n      registered with npm.\"\"\"\n    #.........................................................................................................\n    names = null\n    count = 0\n    loop\n      count += +1\n      break if count > 4\n      for name in names = get_combinations names\n        # continue unless ( /^[^aeiouy][aeiouy][^aeiouy][aeiouy]$/ ).test name\n        # continue unless ( /^[^aeiouy][aeiouy][^aeiouy]$/ ).test name\n        # continue unless ( /^kw..$/ ).test name\n        # continue unless ( /^cn.$/ ).test name\n        # continue unless ( /^fr..$/ ).test name\n        continue unless ( /^j[aeiou]?z[aeiou]?r[aeiou]?$/ ).test name\n        continue if known_names.has name\n        new_names.add name\n        echo name\n    #.........................................................................................................\n    debug new_names.size\n    return null\n\n  # #-----------------------------------------------------------------------------------------------------------\n  # get_combinator = ( combinations = null ) ->\n  #   alphabet      = Array.from 'abcdefghijklmnopqrstuvwxyz'\n  #   combinations ?= [ '' ]\n  #   for letter in alphabet\n  #     for combination in combinations\n  #       yield combination + letter\n  #   return null\n\n\n\n"
  ]
}